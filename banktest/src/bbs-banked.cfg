FEATURES {
    STARTADDRESS: default = $8000;
}
SYMBOLS {
    __STACKSIZE__	= $200;		# 512b parm stack
    __RESERVED_MEMORY__: value = $0, weak = yes;
}
MEMORY {
    ZP:      start = $0082, size = $007E, type = rw, define = yes;
    HEADER:  start = $0000, size = $0006,    file = %O;
    RAM:     start = %S,    size = $BC20 - __STACKSIZE__ - %S, file = %O;
    TRAILER: start = $0000, size = $0006, file = %O;
    BANK0:   start = $4000, size = $4000, define=yes, file = "bank0.bnk";
    BANK1:   start = $4000, size = $4000, define=yes, file = "bank1.bnk";
    BANK2:   start = $4000, size = $4000, define=yes, file = "bank2.bnk";
    BANK3:   start = $4000, size = $4000, define=yes, file = "bank3.bnk";
    MAINBANK:start = $4000, size = $4000, define=yes, file = "mainbank.bnk";
    LOWMEM:  start = $2000, size = $2000, define=yes, file = "lowmem.bnk";
}
SEGMENTS {
    EXEHDR:   load = HEADER,  type = ro;
    STARTUP:  load = RAM,     type = ro,  define = yes;
    LOWCODE:  load = RAM,     type = ro, define = yes, optional = yes;
    INIT:     load = RAM,     type = ro, define = yes, optional = yes;
    CODE:     load = RAM,     type = ro, define = yes;
    RODATA:   load = RAM,     type = ro;
    DATA:     load = RAM,     type = rw;
    ZPSAVE:   load = RAM,     type = bss, define = yes;
    BSS:      load = RAM,     type = bss, define = yes;
    HEAP:     load = RAM,     type = bss, optional = yes; # must sit just below stack
    ZEROPAGE: load = ZP,      type = zp;
    EXTZP:    load = ZP,      type = zp, optional = yes;
    AUTOSTRT: load = TRAILER, type = ro;

    DATADAT : load = LOWMEM, type = ro,define=yes, optional = yes;
    DATAROD : load = LOWMEM, type = ro,define=yes, optional = yes;
    DATABSS : load = LOWMEM, type = ro,define=yes, optional = yes;

    #NOTE these are order sensitive, the DAT and BSS segments must be first
    # in order to make sure the jump table winds up at 0x4000
    BANK0DAT: load = BANK0,   type = rw, define=yes, optional = yes;
    BANK0BSS: load = BANK0,   type = bss, define=yes;
    BANK0SEG: load = BANK0,   type = ro, define=yes, optional = yes;
    BANK0ROD: load = BANK0,   type = ro, define=yes, optional = yes;

    BANK1DAT: load = BANK1,   type = rw, define=yes, optional = yes;
    BANK1BSS: load = BANK1,   type = bss, define=yes;
    BANK1SEG: load = BANK1,   type = ro, define=yes, optional = yes;
    BANK1ROD: load = BANK1,   type = ro, define=yes, optional = yes;

    BANK2DAT: load = BANK2,   type = rw, define=yes, optional = yes;
    BANK2BSS: load = BANK2,   type = bss, define=yes;
    BANK2SEG: load = BANK2,   type = ro, define=yes, optional = yes;
    BANK2ROD: load = BANK2,   type = ro, define=yes, optional = yes;

    BANK3DAT: load = BANK3,   type = rw, define=yes, optional = yes;
    BANK3BSS: load = BANK3,   type = bss, define=yes;
    BANK3SEG: load = BANK3,   type = ro, define=yes, optional = yes;
    BANK3ROD: load = BANK3,   type = ro, define=yes, optional = yes;

    MAINDAT: load = MAINBANK,   type = rw, define=yes, optional = yes;
    MAINBSS: load = MAINBANK,   type = bss, define=yes;
    MAINSEG: load = MAINBANK,   type = ro, define=yes, optional = yes;
    MAINROD: load = MAINBANK,   type = ro, define=yes, optional = yes;
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
